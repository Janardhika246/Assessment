body {
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
    margin: 0;
    padding: 10px;
}

.chat-container {
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    width: 40%;
    margin: 50px auto;
    padding: 20px;
    border-radius: 8px;
}

#chat-box {
    height: 400px;
    overflow-y: auto;
    margin-bottom: 20px;
    padding: 10px;
    background: #e9ebee;
    border: 1px solid #ccc;
}

#messages div {
    margin-bottom: 10px;
}

textarea {
    width: 100%;
    height: 50px;
    margin-bottom: 10px;
    resize: none;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

input[type="file"] {
    margin-bottom: 10px;
}


body {
    font-family: Arial, sans-serif;
    padding: 20px;
    background-color: #f4f4f4;
}
form {
    margin-bottom: 20px;
}
textarea, input[type="file"] {
    width: 100%;
    margin-top: 10px;
}
input[type="submit"], button {
    background-color: #0056b3;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
input[type="submit"]:hover, button:hover {
    background-color: #004494;
}
#chatArea {
    background-color: white;
    border: 1px solid #ddd;from flask import Flask, request, render_template, redirect, url_for, session
    import fitz  # PyMuPDF
    import requests
    import os
    import google.generativeai as genai
    from dotenv import load_dotenv
    from flask_sqlalchemy import SQLAlchemy
    import bcrypt
    
    app = Flask(__name__)
    app.secret_key = os.urandom(24)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
    db = SQLAlchemy(app)
    app.secret_key = 'secret_key'
    
    class User(db.Model):
        id = db.Column(db.Integer, primary_key=True)
        name = db.Column(db.String(100), nullable=False)
        email = db.Column(db.String(100), unique=True)
        password = db.Column(db.String(100))
    
    class ChatSession(db.Model):
        id = db.Column(db.Integer, primary_key=True)
        title = db.Column(db.String(100))
        content = db.Column(db.Text)
    
    with app.app_context():
        db.create_all()
    
    @app.route('/', methods=['GET', 'POST'])
    def index():
        if request.method == 'POST':
            pdf_file = request.files['pdf_file']
            if pdf_file:
                pdf_text = process_pdf(pdf_file)
                session['pdf_text'] = pdf_text
                return redirect(url_for('chat'))
        return render_template('upload.html')
    
    @app.route('/chat', methods=['GET', 'POST'])
    def chat():
        if 'pdf_text' not in session:
            return redirect(url_for('index'))
    
        if request.method == 'POST':
            user_input = request.form['message']
            model = genai.GenerativeModel('gemini-1.5-flash')
            chat_session = model.start_chat(history=[])
            response = chat_session.send_message(session['pdf_text'] + "\n\n" + user_input)
            if 'history' not in session:
                session['history'] = []
            session['history'].append({'role': 'user', 'text': user_input})
            session['history'].append({'role': 'model', 'text': response.text})
    
        history_display = '\n\n'.join(f"**{item['role']}**: {item['text']}" for item in session.get('history', []))
        chat_history = ChatSession.query.all()
        return render_template('chat.html', history=history_display, chat_history=chat_history)
    
    def process_pdf(pdf_file):
        pdf_document = fitz.open(stream=pdf_file.read(), filetype="pdf")
        pdf_text = ''
        for page in pdf_document:
            pdf_text += page.get_text()
        pdf_document.close()
        return pdf_text
    
    # Add other routes and logic here...
    
    if __name__ == '__main__':
        app.run(debug=True)
    
    padding: 15px;
    border-radius: 8px;
    height: 300px;
    overflow-y: scroll;
    margin-top: 20px;
}